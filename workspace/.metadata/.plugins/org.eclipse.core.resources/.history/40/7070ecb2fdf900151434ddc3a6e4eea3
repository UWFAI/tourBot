import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import javax.swing.JTabbedPane;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.SwingConstants;
import java.awt.SystemColor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.swing.JLabel;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import net.miginfocom.swing.MigLayout;
import javax.swing.border.TitledBorder;
import javax.swing.border.MatteBorder;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.JTextField;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.JInternalFrame;
import javax.swing.SpringLayout;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JSeparator;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormSpecs;
import com.jgoodies.forms.layout.RowSpec;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

@SuppressWarnings("serial")
public class DebugWindow extends JFrame {

	private JPanel contentPane;
	private JTable table;
	private DefaultTableModel table_model;
	private JSlider direction_slider;
	private JSlider speed_slider;
	private JTextField textField;
	private JTextField textField_1;
	private JTextField textField_2;
	public JTabbedPane tabbedPane_inputHelper;
	public JTextArea txtrInputCommandInfo;
	public TreePanel panel_tree;
	
	// Watched Variables getters and setters
	public int get_speed(){ return speed_slider.getValue(); }
	public int get_direction(){ return direction_slider.getValue(); }	
	
	public void set_speed(int speed){ 			  table_model.setValueAt(speed, 0, 1); }
	public void set_angle(int angle){ 			  table_model.setValueAt(angle, 1, 1); }
	public void set_distance(int distance){ 	  table_model.setValueAt(distance, 2, 1); }
	public void set_direction(int direction){ 	  table_model.setValueAt(direction, 3, 1); }
	public void set_temperature(int temperature){ table_model.setValueAt(temperature, 4, 1); }
	public void set_bumps(int bumps){	 		  table_model.setValueAt(bumps, 5, 1); }
	public void set_battery(int battery){ 		  table_model.setValueAt(battery, 6, 1); }

	// mouse panel variables
	public MousePanel panel_mouse_move;
	public volatile boolean panel_mouse_move_down = false;
	public volatile MouseEvent panel_mouse_move_event = null;
	
	
	// the windows main thread stuff
	private void window_thread_start() {
		
		new Thread( new Runnable() {
	        public void run()  {
	        	while(true){thread_run();}
	        }
		} ).start();
	}
	
	Random r = new Random();
	@SuppressWarnings("static-access")
	private void thread_run() {
		

		/////
		if (panel_mouse_move_down && panel_mouse_move_event != null) {
			int button = panel_mouse_move_event.getButton();
			
			boolean point_changed = false;
			if (button == panel_mouse_move_event.BUTTON1 || panel_mouse_move_event.getID() == panel_mouse_move_event.MOUSE_DRAGGED){//
				int mx = panel_mouse_move_event.getX();
				int my = panel_mouse_move_event.getY();
				int width = panel_mouse_move.getWidth()-10;
				int height = panel_mouse_move.getHeight()-10;
				int slide_x = (int) ((mx-(width/2.0))/((width/2.0)/100.0));
				int slide_y = (int) ((my-(height/2.0))/((height/2.0)/100.0));
				
				speed_slider.setValue(slide_y*-1);
				direction_slider.setValue(slide_x);
				
				panel_mouse_move.set_newPoint(mx-(width/2)-5, my-(height/2)-5);
				
				point_changed = true;
			}
			if (button == panel_mouse_move_event.BUTTON3) {
				direction_slider.setValue(0);
				speed_slider.setValue(0);
				panel_mouse_move.set_newPoint(0, 0);
				point_changed = true;
				
			}
			if (point_changed) {
				panel_mouse_move.repaint();
			}
		}
		
		
	}
	
	/**
	 * Create the frame.
	 */
	public DebugWindow() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		setMinimumSize(new Dimension(730, 600));
		
		//////////////////////////////////////////////////////////////////////////////////
		// set up the JFrame
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 730, 577);

		//////////////////////////////////////////////////////////////////////////////////
		// set up the main JPanel
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		SpringLayout sl_contentPane = new SpringLayout();
		contentPane.setLayout(sl_contentPane);

		//////////////////////////////////////////////////////////////////////////////////
		// Speed / Direction Remote
		JPanel panel = new JPanel();
		sl_contentPane.putConstraint(SpringLayout.NORTH, panel, 0, SpringLayout.NORTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.WEST, panel, 0, SpringLayout.WEST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, panel, 200, SpringLayout.NORTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.EAST, panel, 200, SpringLayout.WEST, contentPane);
		panel.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "Speed / Direction Remote", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(0, 0, 0)));
		panel.setBackground(SystemColor.menu);
		contentPane.add(panel);
		
		panel_mouse_move = new MousePanel();
		panel_mouse_move.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt)  {panel_mouse_move_down = true; panel_mouse_move_event = evt;}
            public void mouseReleased(MouseEvent evt) {panel_mouse_move_down = false;}
            //public void mouseExited(MouseEvent evt)   {panel_mouse_move_down = false;}
		});
		panel_mouse_move.addMouseMotionListener(new MouseMotionListener() {
			@Override
			public void mouseMoved(MouseEvent evt) {}
			
			@Override
			public void mouseDragged(MouseEvent evt) { if (panel_mouse_move_down) { panel_mouse_move_event = evt; } }
			
		});
		
		panel.setLayout(new MigLayout("", "[][188px]", "[54px][54px][59px]"));
		panel_mouse_move.setBackground(Color.WHITE);
		panel.add(panel_mouse_move, "cell 1 0 1 2,grow");
		
		speed_slider = new JSlider();
		panel.add(speed_slider, "cell 0 0 1 2,grow");
		speed_slider.setSize(new Dimension(50, 50));
		speed_slider.setPaintTicks(true);
		speed_slider.setMinorTickSpacing(10);
		speed_slider.setMajorTickSpacing(50);
		speed_slider.setValue(0);
		speed_slider.setMinimum(-100);
		speed_slider.setOrientation(SwingConstants.VERTICAL);
		
		direction_slider = new JSlider();
		direction_slider.setSize(new Dimension(50, 50));
		direction_slider.setPaintTicks(true);
		direction_slider.setMinorTickSpacing(10);
		direction_slider.setMajorTickSpacing(50);
		direction_slider.setValue(0);
		direction_slider.setMinimum(-100);
		panel.add(direction_slider, "cell 1 2,grow");

		//////////////////////////////////////////////////////////////////////////////////
		JPanel panel_4 = new JPanel();
		sl_contentPane.putConstraint(SpringLayout.NORTH, panel_4, 6, SpringLayout.SOUTH, panel);
		sl_contentPane.putConstraint(SpringLayout.WEST, panel_4, 0, SpringLayout.WEST, panel);
		sl_contentPane.putConstraint(SpringLayout.EAST, panel_4, 200, SpringLayout.WEST, contentPane);
		panel_4.setBorder(new TitledBorder(null, "Watched Variables", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		contentPane.add(panel_4);
		
		table = new JTable();
		table.setRowHeight(20);
		table.setGridColor(SystemColor.inactiveCaption);
		table.setIntercellSpacing(new Dimension(4, 4));
		table.setBackground(UIManager.getColor("InternalFrame.minimizeIconBackground"));
		table.setEnabled(false);
		table.setBorder(new MatteBorder(1, 1, 1, 1, (Color) SystemColor.inactiveCaption));
		table.setModel(new DefaultTableModel(
			new Object[][] {
				{"Speed", null},
				{"Angle", null},
				{"Distance", null},
				{"Direction", null},
				{"Temperature", null},
				{"Bumps", null},
				{"Battery", null},
			},
			new String[] {
				"Propertie", "value"
			}
		));
		table.getColumnModel().getColumn(0).setPreferredWidth(89);
		SpringLayout sl_panel_4 = new SpringLayout();
		sl_panel_4.putConstraint(SpringLayout.NORTH, table, 5, SpringLayout.NORTH, panel_4);
		sl_panel_4.putConstraint(SpringLayout.WEST, table, 5, SpringLayout.WEST, panel_4);
		sl_panel_4.putConstraint(SpringLayout.EAST, table, -5, SpringLayout.EAST, panel_4);
		panel_4.setLayout(sl_panel_4);
		panel_4.add(table);
		table_model = (DefaultTableModel) table.getModel();

		//////////////////////////////////////////////////////////////////////////////////
		// the main tab body of the app
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		sl_contentPane.putConstraint(SpringLayout.NORTH, tabbedPane, 10, SpringLayout.NORTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.WEST, tabbedPane, 6, SpringLayout.EAST, panel);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, tabbedPane, -1, SpringLayout.SOUTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.EAST, tabbedPane, -1, SpringLayout.EAST, contentPane);
		contentPane.add(tabbedPane);

		//////////////////////////////////////////////////////////////////////////////////
		// Controller tab
		JPanel panel_3 = new JPanel();
		tabbedPane.addTab("Controller", null, panel_3, null);
		SpringLayout sl_panel_3 = new SpringLayout();
		panel_3.setLayout(sl_panel_3);
		
		// the Manual Control button
		JToggleButton tglbtnNewToggleButton = new JToggleButton("Manual Control");
		sl_panel_3.putConstraint(SpringLayout.NORTH, tglbtnNewToggleButton, 11, SpringLayout.NORTH, panel_3);
		sl_panel_3.putConstraint(SpringLayout.WEST, tglbtnNewToggleButton, 10, SpringLayout.WEST, panel_3);
		sl_panel_3.putConstraint(SpringLayout.SOUTH, tglbtnNewToggleButton, 49, SpringLayout.NORTH, panel_3);
		sl_panel_3.putConstraint(SpringLayout.EAST, tglbtnNewToggleButton, 180, SpringLayout.WEST, panel_3);
		panel_3.add(tglbtnNewToggleButton);
		
		JLabel lblManualControlMust = new JLabel("Manual control must be on to send commands");
		sl_panel_3.putConstraint(SpringLayout.NORTH, lblManualControlMust, 23, SpringLayout.NORTH, panel_3);
		sl_panel_3.putConstraint(SpringLayout.WEST, lblManualControlMust, 190, SpringLayout.WEST, panel_3);
		sl_panel_3.putConstraint(SpringLayout.EAST, lblManualControlMust, 474, SpringLayout.WEST, panel_3);
		panel_3.add(lblManualControlMust);
		
		/////////////////////////////////////
		JPanel panel_5 = new JPanel();
		sl_panel_3.putConstraint(SpringLayout.NORTH, panel_5, 60, SpringLayout.NORTH, panel_3);
		sl_panel_3.putConstraint(SpringLayout.WEST, panel_5, 10, SpringLayout.WEST, panel_3);
		sl_panel_3.putConstraint(SpringLayout.EAST, panel_5, -8, SpringLayout.EAST, panel_3);
		panel_5.setBorder(new TitledBorder(null, "Input Helper", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_3.add(panel_5);
		
		textField = new JTextField();
		textField.setEditable(false);
		textField.setColumns(10);
		
		JButton btnNewButton = new JButton("Send");
		
		//
		
		txtrInputCommandInfo = new JTextArea();
		txtrInputCommandInfo.setAutoscrolls(false);
		txtrInputCommandInfo.setLineWrap(true);
		txtrInputCommandInfo.setRows(8);
		txtrInputCommandInfo.setTabSize(4);
		txtrInputCommandInfo.setWrapStyleWord(true);
		
		tabbedPane_inputHelper = new JTabbedPane(JTabbedPane.LEFT);
		tabbedPane_inputHelper.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
		tabbedPane_inputHelper.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent arg0) {
				String tab_name = tabbedPane_inputHelper.getTitleAt(tabbedPane_inputHelper.getSelectedIndex());
				txtrInputCommandInfo.setText(get_doc(tab_name.toLowerCase()));
			}
		});
		
		JScrollPane scrollPane_Drive = new JScrollPane();
		scrollPane_Drive.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		tabbedPane_inputHelper.addTab("Drive", null, scrollPane_Drive, null);
		
		JPanel panel_driveInput = new JPanel();
		panel_driveInput.setBackground(SystemColor.window);
		scrollPane_Drive.setViewportView(panel_driveInput);
		
		JScrollPane scrollPane_Clean = new JScrollPane();
		tabbedPane_inputHelper.addTab("Clean", null, scrollPane_Clean, null);
		
		JPanel panel_cleanInput = new JPanel();
		panel_cleanInput.setBackground(SystemColor.window);
		scrollPane_Clean.setViewportView(panel_cleanInput);
		
		JScrollPane scrollPane_Reset = new JScrollPane();
		tabbedPane_inputHelper.addTab("Reset", null, scrollPane_Reset, null);
		
		JPanel panel_resetInput = new JPanel();
		panel_resetInput.setBackground(SystemColor.window);
		scrollPane_Reset.setViewportView(panel_resetInput);
		
		JScrollPane scrollPane_LEDs = new JScrollPane();
		tabbedPane_inputHelper.addTab("LEDs", null, scrollPane_LEDs, null);
		
		JPanel panel_LEDInput = new JPanel();
		panel_LEDInput.setBackground(SystemColor.window);
		scrollPane_LEDs.setViewportView(panel_LEDInput);
		
		JScrollPane scrollPane_Buttons = new JScrollPane();
		tabbedPane_inputHelper.addTab("Buttons", null, scrollPane_Buttons, null);
		
		JPanel panel_buttonsInput = new JPanel();
		panel_buttonsInput.setBackground(SystemColor.window);
		scrollPane_Buttons.setViewportView(panel_buttonsInput);
		
		JScrollPane scrollPane_Song = new JScrollPane();
		tabbedPane_inputHelper.addTab("Song", null, scrollPane_Song, null);
		
		JPanel panel_songInput = new JPanel();
		panel_songInput.setBackground(SystemColor.window);
		scrollPane_Song.setViewportView(panel_songInput);
		
		JScrollPane scrollPane_Sensors = new JScrollPane();
		tabbedPane_inputHelper.addTab("Sensors", null, scrollPane_Sensors, null);
		
		JPanel panel_sensorsInput = new JPanel();
		panel_sensorsInput.setBackground(SystemColor.window);
		scrollPane_Sensors.setViewportView(panel_sensorsInput);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setViewportView(txtrInputCommandInfo);

		JLabel lblDocumentation = new JLabel("Documentation");
		lblDocumentation.setHorizontalAlignment(SwingConstants.CENTER);
		scrollPane.setColumnHeaderView(lblDocumentation);

		/////////////////////////////////////
		JPanel panel_6 = new JPanel();
		sl_panel_3.putConstraint(SpringLayout.SOUTH, panel_5, -6, SpringLayout.NORTH, panel_6);
		GroupLayout gl_panel_5 = new GroupLayout(panel_5);
		gl_panel_5.setHorizontalGroup(
			gl_panel_5.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_5.createSequentialGroup()
					.addGap(5)
					.addGroup(gl_panel_5.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel_5.createSequentialGroup()
							.addComponent(tabbedPane_inputHelper, GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
							.addGap(5)
							.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
						.addGroup(gl_panel_5.createSequentialGroup()
							.addComponent(textField, GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
							.addGap(17)
							.addComponent(btnNewButton, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)))
					.addGap(5))
		);
		gl_panel_5.setVerticalGroup(
			gl_panel_5.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_5.createSequentialGroup()
					.addGap(5)
					.addGroup(gl_panel_5.createParallelGroup(Alignment.LEADING)
						.addComponent(tabbedPane_inputHelper, GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
						.addGroup(gl_panel_5.createSequentialGroup()
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
							.addGap(5)))
					.addGap(5)
					.addGroup(gl_panel_5.createParallelGroup(Alignment.LEADING)
						.addComponent(btnNewButton)
						.addComponent(textField, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
					.addGap(3))
		);
		panel_5.setLayout(gl_panel_5);
		sl_panel_3.putConstraint(SpringLayout.WEST, panel_6, 10, SpringLayout.WEST, panel_3);
		sl_panel_3.putConstraint(SpringLayout.EAST, panel_6, -8, SpringLayout.EAST, panel_3);
		panel_6.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "Raw Output", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(0, 0, 0)));
		panel_3.add(panel_6);
		SpringLayout sl_panel_6 = new SpringLayout();
		panel_6.setLayout(sl_panel_6);
		
		JButton button = new JButton("Send");
		panel_6.add(button);
		
		JLabel lblPleaseLookAt = new JLabel("Please look at all documentation before using the Raw Output method.");
		sl_panel_6.putConstraint(SpringLayout.WEST, lblPleaseLookAt, 5, SpringLayout.WEST, panel_6);
		sl_panel_6.putConstraint(SpringLayout.EAST, lblPleaseLookAt, 355, SpringLayout.WEST, panel_6);
		panel_6.add(lblPleaseLookAt);
		
		textField_1 = new JTextField();
		sl_panel_6.putConstraint(SpringLayout.NORTH, textField_1, 10, SpringLayout.NORTH, panel_6);
		sl_panel_6.putConstraint(SpringLayout.NORTH, lblPleaseLookAt, 20, SpringLayout.SOUTH, textField_1);
		sl_panel_6.putConstraint(SpringLayout.NORTH, button, 10, SpringLayout.SOUTH, textField_1);
		sl_panel_6.putConstraint(SpringLayout.WEST, button, -95, SpringLayout.EAST, textField_1);
		sl_panel_6.putConstraint(SpringLayout.EAST, button, 0, SpringLayout.EAST, textField_1);
		sl_panel_6.putConstraint(SpringLayout.WEST, textField_1, 5, SpringLayout.WEST, panel_6);
		sl_panel_6.putConstraint(SpringLayout.SOUTH, textField_1, 30, SpringLayout.NORTH, panel_6);
		sl_panel_6.putConstraint(SpringLayout.EAST, textField_1, -5, SpringLayout.EAST, panel_6);
		panel_6.add(textField_1);
		textField_1.setColumns(10);

		/////////////////////////////////////
		JPanel panel_7 = new JPanel();
		sl_panel_3.putConstraint(SpringLayout.NORTH, panel_6, -100, SpringLayout.NORTH, panel_7);
		sl_panel_3.putConstraint(SpringLayout.NORTH, panel_7, -100, SpringLayout.SOUTH, panel_3);
		sl_panel_3.putConstraint(SpringLayout.EAST, panel_7, -8, SpringLayout.EAST, panel_3);
		sl_panel_3.putConstraint(SpringLayout.SOUTH, panel_6, -6, SpringLayout.NORTH, panel_7);
		sl_panel_3.putConstraint(SpringLayout.SOUTH, panel_7, -13, SpringLayout.SOUTH, panel_3);
		sl_panel_3.putConstraint(SpringLayout.WEST, panel_7, 10, SpringLayout.WEST, panel_3);
		panel_7.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "Sensor Input", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(0, 0, 0)));
		panel_3.add(panel_7);
		
		textField_2 = new JTextField();
		textField_2.setColumns(10);
		
		JLabel lblRaw = new JLabel("Raw");
		GroupLayout gl_panel_7 = new GroupLayout(panel_7);
		gl_panel_7.setHorizontalGroup(
			gl_panel_7.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_7.createSequentialGroup()
					.addGap(4)
					.addComponent(lblRaw, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
					.addGap(10)
					.addComponent(textField_2, GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
					.addGap(14))
		);
		gl_panel_7.setVerticalGroup(
			gl_panel_7.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_7.createSequentialGroup()
					.addGap(23)
					.addComponent(lblRaw))
				.addGroup(gl_panel_7.createSequentialGroup()
					.addGap(20)
					.addComponent(textField_2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
		);
		panel_7.setLayout(gl_panel_7);
		
		JButton btnTurnOff = new JButton("Turn Off");
		sl_contentPane.putConstraint(SpringLayout.SOUTH, panel_4, -5, SpringLayout.NORTH, btnTurnOff);
		sl_contentPane.putConstraint(SpringLayout.NORTH, btnTurnOff, -50, SpringLayout.SOUTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, btnTurnOff, -1, SpringLayout.SOUTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.WEST, btnTurnOff, 0, SpringLayout.WEST, panel);
		sl_contentPane.putConstraint(SpringLayout.EAST, btnTurnOff, 0, SpringLayout.EAST, panel);
		contentPane.add(btnTurnOff);

		//////////////////////////////////////////////////////////////////////////////////
		// tree tab
		JScrollPane scrollPane_Tree = new JScrollPane();
		scrollPane_Tree.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane_Tree.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		tabbedPane.addTab("Tree", null, scrollPane_Tree, null);
		
		panel_tree = new TreePanel();
		panel_tree.setBackground(Color.WHITE);
		scrollPane_Tree.setViewportView(panel_tree);
		//tabbedPane.addTab("Tree", null, panel_tree, null);
		
		/*
		panel_tree = new TreePanel();
		panel_tree.setBackground(Color.LIGHT_GRAY);
		tabbedPane.addTab("Tree", null, panel_tree, null);
		*/
		
		
		/*
		JScrollPane scrollPane_Tree = new JScrollPane();
		scrollPane_Tree.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		tabbedPane_inputHelper.addTab("Drive", null, scrollPane_Tree, null);
		*/
		
		//JPanel panel_driveInput = new JPanel();
		//panel_driveInput.setBackground(SystemColor.window);
		
		
		//////////////////////////////////////////////////////////////////////////////////
		setVisible(true);
		
		//
		window_thread_start();
	}
	
	private String get_doc(String id) {
		String filename = "docs/documentation.xml";
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder(); 
			Document doc = db.parse(new File(filename));
			
			doc.getDocumentElement().normalize();
			//System.out.println("Root element :" + doc.getDocumentElement().toString());
			NodeList nList = doc.getElementsByTagName("doc");
			for (int i = 0; i < nList.getLength(); i++) {
				Node nNode = nList.item(i);
				//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					if (eElement.getAttribute("id").compareTo(id) == 0) {
						return eElement.getElementsByTagName("text").item(0).getTextContent();
					}
				}
			}
		} catch (SAXException | IOException | ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
		return "";
	}

	private class MousePanel extends JPanel {
		
		int point_x = 0;
		int point_y = 0;
		int point_size = 10;
		
		public MousePanel(){
			super();
		}
		
		public void set_newPoint(int x, int y) {
			point_x = x;
			point_y = y;
		}
		
		public void paintComponent(Graphics g) {
			super.paintComponent(g);  
			
			int cx = this.getWidth()/2;
			int cy = this.getHeight()/2;
			
			int px = cx+point_x-point_size/2;
			int py = cy+point_y-point_size/2;
			
			g.drawOval(px, py, point_size, point_size);
		}
	}

	class TreePanel extends JPanel {
		
		Quadtree painter = null;
		
		public TreePanel(){
			super();
		}
		
		public void reSize(int width, int height) {
			this.setPreferredSize(new Dimension(width,  height));
			this.revalidate();
		}
		
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			
			if (painter != null) {
				painter.paint(g);
			}
		}
	}
}
