import java.util.ArrayList;
import jssc.*;

/**
* <h1>IRobot Communication</h1>
* The IRobot class acts as the middle man between
* the main AI and the IRobot. The java simple serial 
* connector is used for the communication to make
* the whole thing as simple as possible.
*/
public class IRobot{
	
	private SerialPort sPort;
	private SerialPortEventListener event;
	private ArrayList<Integer> opcodes = new ArrayList<Integer>();
	private byte[] bytes = new byte[256];
	
	
	public IRobot(){
		//
		String[] ports = SerialPortList.getPortNames();
		for(int i =0;i<ports.length;i++) {
			System.out.println(ports[i]);
		}
		
		// a small speed up helper
		for(int i=0; i<bytes.length; i++) {
			bytes[i] = (byte) (i & 0xFF);
		}
		
		// start the connection
		try {
			sPort = new SerialPort("COM3");
			sPort.openPort();
			sPort.setParams(115200, 8, 1, 0);
		} catch (SerialPortException e){
			e.printStackTrace();
		}
		
		IO_start();
		
		//
		addListener();
	}
	
	private void addListener(){
		event = new SerialPortEventListener() {
			@Override
			public void serialEvent(SerialPortEvent serialPortEvent) {
				// TODO
			}
		};
	}

	/**
	* This method is used to send the list of commands 
	* and clear the opcode list. 
	*/
	public void IO_send(){
		try {
			for(int i = 0;i<opcodes.size(); i++) {
				sPort.writeByte(bytes[opcodes.get(i)]);
			}
		} catch (SerialPortException e) {
			e.printStackTrace();
		}
		opcodes.clear();
	}

	// start needs to be called before each command that sends
	public void IO_start(){
		opcodes.add(128);
	}
	public void IO_reset(){
		opcodes.add(7);
	}
	public void IO_stop(){
		opcodes.add(173);
	}

	// an easy way to test commands
	public void IO_add(int[] buffer){
		for(int i = 0;i<buffer.length;i++){
			opcodes.add(buffer[i]);
		}
	}

	// true - safe
	// false - full
	public void setMode(boolean safe){
		if (safe)
			opcodes.add(131);
		else
			opcodes.add(132);
	}

	// TODO: the simple methods of just sending bytes
	// seekDock()
	// Drive(Velocity, Radius)
	// DriveDirect(Right velocity, Left velocity)
	// DrivePWM(Right PWM, Left PWM)
	// LEDs // there are 4
	// Digit_LEDs(d1, d2, d3)
	public void setSong(int songIndex, int[] song){
		opcodes.add(140);
		opcodes.add(songIndex);
		opcodes.add(song.length/2);			
		for(int i = 0;i<song.length;i++) {
			opcodes.add(song[i]);
		}
	}
	public void playSong(int songIndex){
		opcodes.add(141);
		opcodes.add(songIndex);
	}
	
	// TODO: Input Commands
	
	
}
